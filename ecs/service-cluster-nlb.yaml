---
AWSTemplateFormatVersion: '2010-09-09'
Description: "ECS: service that runs on an ECS cluster and uses the cluster's NLB based on ecs/cluster.yaml, a cloudonaut.io template"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentClusterStack
      - ParentAlertStack
      - ParentZoneStack
    - Label:
        default: 'Load Balancer Parameters'
      Parameters:
      - LoadBalancerPort
      # - LoadBalancerPriority
      # - LoadBalancerHostPattern
      # - LoadBalancerPath
      # - LoadBalancerHttps
      - LoadBalancerDeregistrationDelay
    - Label:
        default: 'Service Parameters'
      Parameters:
      - SubDomainName
    - Label:
        default: 'Task Parameters'
      Parameters:
      - Image
      - TaskRunningRoleArn
      - ContainerLocalPort
      - ContainerHardMemory
      - DesiredCount
      - MaxCapacity
      - MinCapacity
Parameters:
  ParentClusterStack:
    Description: 'Stack name of parent Cluster stack based on ecs/cluster.yaml template.'
    Type: String
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''
  ParentZoneStack:
    Description: 'Optional stack name of parent zone stack based on vpc/zone-*.yaml template.'
    Type: String
    Default: ''
  LoadBalancerPort:
    Description: 'load balancer listener port in front of the ECS cluster'
    Type: Number
    Default: 80
    MinValue: 1    
  ContainerLocalPort:
    Description: 'ContainerLocalPort'
    Type: Number
    Default: 80
    MinValue: 1      
  # LoadBalancerPriority:
  #   Description: 'The priority for the rule. Elastic Load Balancing evaluates rules in priority order, from the lowest value to the highest value. If a request satisfies a rule, Elastic Load Balancing ignores all subsequent rules. A target group can have only one rule with a given priority.'
  #   Type: Number
  #   Default: 1
  #   ConstraintDescription: 'Must be in the range [1-99999]'
  #   MinValue: 1
  #   MaxValue: 99999
  # LoadBalancerHostPattern:
  #   Description: 'Optional host pattern. Specify LoadBalancerPath and/or LoadBalancerHostPattern.'
  #   Type: String
  #   Default: ''
  #   ConstraintDescription: 'Must not be longer than 255'
  #   MaxLength: 255
  # LoadBalancerPath:
  #   Description: 'Optional path part of the path pattern. E.g., for service, the path pattern will be /service/*.  Specify LoadBalancerPath and/or LoadBalancerHostPattern.'
  #   Type: String
  #   Default: 'service'
  #   ConstraintDescription: 'Must not be longer than 255'
  #   MaxLength: 255
  # LoadBalancerHttps:
  #   Description: 'If the cluster supports HTTPS (LoadBalancerCertificateArn is set) you can enable HTTPS for the service'
  #   Type: String
  #   Default: false
  #   AllowedValues:
  #   - true
  #   - false
  LoadBalancerDeregistrationDelay:
    Description: 'The amount time (in seconds) to wait before changing the state of a deregistering target from draining to unused.'
    Type: Number
    Default: 300
    ConstraintDescription: 'Must be in the range [0-3600]'
    MinValue: 0
    MaxValue: 3600
  Image:
    Description: 'The image to use for a container, which is passed directly to the Docker daemon. You can use images in the Docker Hub registry or specify other repositories (repository-url/image:tag).'
    Type: String
  TaskRunningRoleArn:
    Description: 'Optional Amazon Resource Name (ARN) of Docker Task Running.'
    Type: String
    Default: ''
  ContainerHardMemory:
    Description: 'The container hard memory reservced'
    Type: Number
    Default: 1024
    MinValue: 128
  DesiredCount:
    Description: 'The number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  MaxCapacity:
    Description: 'The maximum number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 4
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  MinCapacity:
    Description: 'The minimum number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  SubDomainName:
    Description: 'Name that is used to create the DNS entry ${SubDomainName}.${HostedZoneName} (works only when ParentZoneStack is set)'
    Type: String
    Default: ''
Mappings: {}
Conditions:
  # HasLoadBalancerHttps: !Equals [!Ref LoadBalancerHttps, 'true']
  # HasLoadBalancerPath: !Not [!Equals [!Ref LoadBalancerPath, '']]
  # HasLoadBalancerHostPattern: !Not [!Equals [!Ref LoadBalancerHostPattern, '']]
  HasTaskRunningRoleArn: !Not [!Equals [!Ref TaskRunningRoleArn, '']]
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
  HasZone: !Not [!Equals [!Ref ParentZoneStack, '']]
Resources:
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref 'AWS::StackName'
      NetworkMode: bridge
      TaskRoleArn: !If [HasTaskRunningRoleArn, !Ref TaskRunningRoleArn, !Ref 'AWS::NoValue']
      ContainerDefinitions:
      - Name: main # if you change this, you also must change the AWS::ECS::Service
        Image: !Ref Image
        # Cpu: 128
        Memory: !Ref ContainerHardMemory
        PortMappings:
        - ContainerPort: !Ref ContainerLocalPort  # if you change this, you also must change the AWS::ECS::Service
          Protocol: tcp
        Essential: true
        Environment:
          - Name: KINESIS_STREAM_NAME
            Value: townkins_mysql_stream
          - Name: KINESIS_STREAM_REGION
            Value: ap-northeast-1
          - Name: KINESIS_STREAM_ACCESS
            Value: ""            
          - Name: KINESIS_STREAM_SECRET
            Value: ""                       
        LogConfiguration:
          LogDriver: awslogs
          Options:
            'awslogs-region': !Ref 'AWS::Region'
            'awslogs-group':
              'Fn::ImportValue': !Sub '${ParentClusterStack}-LogGroup'
            'awslogs-stream-prefix': !Ref 'AWS::StackName'
  RecordSet:
    Condition: HasZone
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        HostedZoneId:
          'Fn::ImportValue': !Sub '${ParentClusterStack}-CanonicalHostedZoneID'
        DNSName:
          'Fn::ImportValue': !Sub '${ParentClusterStack}-DNSName'
      HostedZoneId:
        'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'
      Name: !Sub
      - '${SubDomainName}.${HostedZoneName}'
      - SubDomainName: !Ref SubDomainName
        HostedZoneName:
          'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'
      Type: A
  LoadBalancerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 2
      Port: !Ref LoadBalancerPort 
      Protocol: TCP
      UnhealthyThresholdCount: 2 
      VpcId:
        'Fn::ImportValue': !Sub '${ParentClusterStack}-VPC'
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: !Ref LoadBalancerDeregistrationDelay
  HttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref LoadBalancerTargetGroup
        Type: forward
      LoadBalancerArn: 
        'Fn::ImportValue': !Sub '${ParentClusterStack}-LoadBalancer'
      Port: !Ref LoadBalancerPort 
      Protocol: TCP
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ecs.amazonaws.com'
          Action: 'sts:AssumeRole'
  Service:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref DesiredCount
      LoadBalancers:
      - ContainerName: main
        ContainerPort: !Ref ContainerLocalPort
        TargetGroupArn: !Ref LoadBalancerTargetGroup
      Role: !GetAtt 'ServiceRole.Arn'
      TaskDefinition: !Ref TaskDefinition
  ScalableTargetRole: # based on http://docs.aws.amazon.com/AmazonECS/latest/developerguide/autoscale_IAM_role.html
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'application-autoscaling.amazonaws.com'
          Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: ecs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ecs:DescribeServices'
            - 'ecs:UpdateService'
            Resource: '*'
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'cloudwatch:DescribeAlarms'
            Resource: '*'
  ScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Sub
      - 'service/${Cluster}/${Service}'
      - Cluster:
          'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'
        Service: !GetAtt 'Service.Name'
      RoleARN: !GetAtt 'ScalableTargetRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
  ScaleUpPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-up'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 25
  ScaleDownPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-down'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -25
  CPUUtilizationTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value:
          'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
  CPUUtilizationHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Service is running out of CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value:
          'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 60
      AlarmActions:
      - !Ref ScaleUpPolicy
  CPUUtilizationLowAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Service is wasting CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value:
          'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: LessThanThreshold
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 30
      AlarmActions:
      - !Ref ScaleDownPolicy
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id'
    Value: 'ecs/service-cluster-nlb'
  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'
  DNSName:
    Description: 'The DNS name for the ECS cluster/service load balancer.'
    Value:
      'Fn::ImportValue': !Sub '${ParentClusterStack}-DNSName'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  URL:
    Description: 'URL to the ECS service.' # TODO does not work with LoadBalancerHostPattern
    Value: !Sub
    - '${ClusterURL}'
    - ClusterURL:
        'Fn::ImportValue': !Sub '${ParentClusterStack}-URL'
      # LoadBalancerPath: !Ref LoadBalancerPath
    Export:
      Name: !Sub '${AWS::StackName}-URL'
